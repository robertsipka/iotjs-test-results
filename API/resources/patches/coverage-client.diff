diff --git a/jerry-debugger/jerry-client-ws.py b/jerry-debugger/jerry-client-ws.py
index 315d386..3fd1d9b 100755
--- a/jerry-debugger/jerry-client-ws.py
+++ b/jerry-debugger/jerry-client-ws.py
@@ -26,6 +26,8 @@ import struct
 import sys
 import math
 import time
+import json
+import os
 
 # Expected debugger protocol version.
 JERRY_DEBUGGER_VERSION = 2
@@ -114,6 +116,8 @@ def arguments_parse():
                         help="set exception config, usage 1: [Enable] or 0: [Disable]")
     parser.add_argument("--client-source", action="store", default=[], type=str, nargs="+",
                         help="specify a javascript source file to execute")
+    parser.add_argument("--coverage-output", action="store", default="coverage_output.json",
+                        help="specify the optuput file for coverage (default: %(default)s)")
 
     args = parser.parse_args()
 
@@ -1089,6 +1093,12 @@ def get_breakpoint(debugger, breakpoint_data):
 def main():
     args = arguments_parse()
 
+    coverage_info = {}
+
+    if os.path.isfile(args.coverage_output):
+        with open(args.coverage_output) as data:
+            coverage_info = json.load(data)
+
     debugger = JerryDebugger(args.address)
     exception_string = ""
 
@@ -1144,6 +1154,17 @@ def main():
                            JERRY_DEBUGGER_FUNCTION_NAME_END]:
             parse_source(debugger, data)
 
+            for key in debugger.function_list:
+                function = debugger.function_list[key]
+                lines = function.lines
+
+                if str(function.source_name) not in coverage_info:
+                    coverage_info[str(function.source_name)] = {}
+
+                for breakpoint in lines.values():
+                    if str(breakpoint.line) not in coverage_info[str(function.source_name)]:
+                        coverage_info[function.source_name][str(breakpoint.line)] = False
+
         elif buffer_type == JERRY_DEBUGGER_WAITING_AFTER_PARSE:
             debugger.send_command(JERRY_DEBUGGER_PARSER_RESUME)
 
@@ -1157,9 +1178,9 @@ def main():
             debugger.last_breakpoint_hit = breakpoint[0]
 
             if buffer_type == JERRY_DEBUGGER_EXCEPTION_HIT:
-                print("Exception throw detected (to disable automatic stop type exception 0)")
+                #print("Exception throw detected (to disable automatic stop type exception 0)")
                 if exception_string:
-                    print("Exception hint: %s" % (exception_string))
+                    #print("Exception hint: %s" % (exception_string))
                     exception_string = ""
 
             if breakpoint[1]:
@@ -1170,7 +1191,6 @@ def main():
             if breakpoint[0].active_index >= 0:
                 breakpoint_info += " breakpoint:%s%d%s" % (debugger.red, breakpoint[0].active_index, debugger.nocolor)
 
-            print("Stopped %s %s" % (breakpoint_info, breakpoint[0]))
             if debugger.display:
                 print_source(prompt.debugger, debugger.display, 0)
 
@@ -1178,7 +1198,11 @@ def main():
                 prompt.do_next(debugger.repeats_remain)
                 time.sleep(0.1)
             else:
-                prompt.cmdloop()
+                prompt.onecmd('c')
+                coverage_info[str(breakpoint[0].function.source_name)][str(breakpoint[0].line)] = True
+                if breakpoint[0].active_index >= 0:
+                    prompt.onecmd ('delete ' + str(breakpoint[0].active_index))
+
 
             if prompt.quit:
                 break
@@ -1286,6 +1310,13 @@ def main():
         else:
             raise Exception("Unknown message")
 
+    with open(args.coverage_output, 'w') as outfile:
+        for func_name in coverage_info:
+            breakpoints = coverage_info[func_name]
+            coverage_info[func_name] = {int(k) : v for k, v in breakpoints.items()}
+
+        json.dump(coverage_info, outfile)
+        print("Finished the execution.")
 
 if __name__ == "__main__":
     try:
